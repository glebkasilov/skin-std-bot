from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.enums import ParseMode
from aiogram.utils.media_group import MediaGroupBuilder
from random import randint

from database.repository import UserRepository
from filters.in_db_filter import InDbFilter
from keyboards.reply_keyboards.main_menu_keyboard import main_menu_keyboard


router = Router()


@router.message(F.text, Command("menu"), InDbFilter())
async def menu(message: Message):
    await message.reply(
        "–í—ã –æ—Ç–∫—Ä—ã–ª–∏ –º–µ–Ω—é",
        reply_markup=main_menu_keyboard
    )


@router.message(F.text == "Click", InDbFilter())
async def click(message: Message):
    count = round(randint(1, 5) * 0.10, 2)
    await message.reply(
        f"+ {count} –≥–æ–ª–¥—ã"
    )
    UserRepository.add_money(message.from_user.id, count)


@router.message(F.text == "–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", InDbFilter())
async def subscribe(message: Message):
    if UserRepository.get_user_refferals(message.from_user.id) >= 10 and not UserRepository.get_user_prime_status(message.from_user.id):
        UserRepository.set_user_prime_status(message.from_user.username, True)
        await message.reply(
            "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å—Ç–∞—Ç—É—Å VIP —Å—Ç–∞—Ç—É—Å!"
        )

    elif not UserRepository.get_user_prime_status(message.from_user.id):
        await message.reply(
            f"""‚úÖ–°–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:

        ‚Ä¢–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 10 —á–µ–ª–æ–≤–µ–∫

        –∏–ª–∏

        ‚Ä¢–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–æ—Ç–∞ –Ω–∞ 300‚ÇΩ
        <i>–î–ª—è —ç—Ç–æ–≥–æ –ø–∏—à–∏—Ç–µ</i> /pay""",
            parse_mode=ParseMode.HTML
        )
    else:
        await message.reply(
            "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å, –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É"
        )


@router.message(F.text == "–í—ã–≤–µ—Å—Ç–∏ –≥–æ–ª–¥—É", InDbFilter())
async def subscribe(message: Message):
    if not UserRepository.get_user_prime_status(message.from_user.id):
        await message.reply(
            "‚ú®–ü—Ä–µ–∂–¥–µ –ø–æ–ª—É—á–∏—Ç–µ VIP —Å—Ç–∞—Ç—É—Å‚ú®"
        )
    else:
        await message.reply(
            "–ê—Ö—É–µ–ª?"
        )


@router.message(F.text == "–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞", InDbFilter())
async def support(message: Message):
    await message.reply(
        "–î–ª—è —Ç–µ—Ö–Ω–∏—á–µ–∫—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /help"
    )


@router.message(F.text == "–ü—Ä–æ—Ñ–∏–ª—å –∏ –±–∞–ª–∞–Ω—Å", InDbFilter())
async def profile(message: Message):
    user = message.from_user.id
    builder = MediaGroupBuilder(
        caption=f"""üêô<strong> –ü—Ä–æ—Ñ–∏–ª—å</strong> [{user}]
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üî¥ <strong>{"–ù–µ—Ç –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞"if not UserRepository.get_user_prime_status(user) else "–ü—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω!"}</strong>
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üíµ –ë–∞–ª–∞–Ω—Å: <strong>{"{:.2f}".format(UserRepository.get_user_money(user))} G</strong>
üîÑ –ù–∞ –≤—ã–¥–∞—á–µ: <strong>0 G</strong>
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üè† –†–µ—Ñ–µ—Ä–∞–ª—ã: <strong>{UserRepository.get_user_refferals(user)}</strong>
–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: <I>{user}</I>"""
    )

    builder.add_photo(
        media=FSInputFile("images/profile.png"),
        parse_mode=ParseMode.HTML
    )

    await message.reply_media_group(
        media=builder.build()
    )


@router.message(F.text == "–û—Ç–∑—ã–≤—ã", InDbFilter())
async def reviews(message: Message):
    await message.reply(
        """@skin_std_reviews - –ö–∞–Ω–∞–ª —Å –æ—Ç–∑—ã–≤–∞–º–∏ –æ –º–∞–≥–∞–∑–∏–Ω–µ
        
@freeskisADM - –ü–∏—à–∏ —Å—é–¥–∞ –æ—Ç–∑—ã–≤ –æ –±–æ—Ç–µ"""
    )


@router.message(F.text == "–ö–∞–Ω–∞–ª", InDbFilter())
async def channel(message: Message):
    await message.reply(
        "–ö–∞–Ω–∞–ª: @freeskis"
    )
